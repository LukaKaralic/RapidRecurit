@{
    ViewData["Title"] = "Submit Application";
}
@model RapidRecruit.Models.JobPosting

<div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="bg-white shadow-lg rounded-lg overflow-hidden">
        <!-- Header Section -->
        <div class="p-6 sm:p-8 border-b border-gray-200">
            <div>
                <h1 class="text-2xl sm:text-3xl font-bold text-gray-900 mb-2">Submit Application</h1>
                <p class="text-lg text-gray-700 font-medium">@Model.Title</p>
                <p class="text-gray-600">@Model.User.BusinessName</p>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="text-sm font-medium text-gray-500">Salary Range</h3>
                        <p class="mt-1 text-lg font-medium text-gray-900">
                            $@Model.MinimumSalary - $@Model.MaximumSalary
                        </p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="text-sm font-medium text-gray-500">Application Deadline</h3>
                        <p class="mt-1 text-lg font-medium text-gray-900">
                            @Model.EndDate.ToString("MMMM dd, yyyy")
                        </p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="text-sm font-medium text-gray-500">Posted Date</h3>
                        <p class="mt-1 text-lg font-medium text-gray-900">
                            @Model.CreatedAt.ToString("MMMM dd, yyyy")
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <form action="/Home/JobPostings/@Model.Id/Apply" method="post" enctype="multipart/form-data">
            @Html.AntiForgeryToken()
            <div class="p-6 sm:p-8 space-y-8">
                <div>
                    <label for="message" class="block text-sm font-medium text-gray-700 mb-2">
                        Message to Hiring Manager
                    </label>
                    <textarea
                              id="message"
                              name="message"
                              rows="6"
                              class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"
                              placeholder="Introduce yourself and explain why you're a great fit for this position..."></textarea>
                </div>

                <div>
                    <label for="resume" class="block text-sm font-medium text-gray-700 mb-2">
                        Upload Resume
                    </label>
                    <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                        <div class="space-y-1 text-center">
                            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                            <div class="flex text-sm text-gray-600">
                                <label for="resume-upload" class="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500">
                                    <span>Upload a file</span>
                                    <input name="resume" id="resume-upload" required type="file" class="sr-only" accept=".pdf,.doc,.docx">
                                </label>
                                <p class="pl-1">or drag and drop</p>
                            </div>
                            <p class="text-xs text-gray-500">
                                PDF, DOC, DOCX up to 10MB
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="bg-gray-50 px-6 py-4 sm:px-8 border-t border-gray-200">
                <div class="flex justify-between items-center">
                    <a asp-controller="Home" asp-action="Job" asp-route-id="@Model.Id"
                       class="text-gray-600 hover:text-gray-900 font-medium">
                        ← Back to Job Details
                    </a>
                    <button type="submit"
                            class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Submit Application
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    document.getElementById('resume-upload').addEventListener('change', function (e) {
        const fileName = e.target.files[0]?.name;
        if (fileName) {
            const fileText = document.querySelector('.text-xs.text-gray-500');
            fileText.textContent = `Selected file: ${fileName}`;
        }
    });

    // Drag and drop functionality
    const dropZone = document.querySelector('.border-dashed');
    const fileInput = document.getElementById('resume-upload');

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, unhighlight, false);
    });

    function highlight(e) {
        dropZone.classList.add('border-indigo-500');
    }

    function unhighlight(e) {
        dropZone.classList.remove('border-indigo-500');
    }

    dropZone.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        fileInput.files = files;

        if (files[0]) {
            const fileText = document.querySelector('.text-xs.text-gray-500');
            fileText.textContent = `Selected file: ${files[0].name}`;
        }
    }
</script>